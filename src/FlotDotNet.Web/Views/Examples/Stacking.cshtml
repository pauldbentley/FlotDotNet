@model FlotDotNet.FlotChart

@{
    ViewData["Title"] = "Stacking";
}

@section Scripts {
    <script src="~/lib/flot/jquery.flot.stack.js"></script>
    @Html.Raw(Model.Plot(false))

    <script type="text/javascript">
        $(function()
        {
            var stack = 0,
                bars = true,
                lines = false,
                steps = false;

            function plotWithOptions()
            {
                var series = chart.options.series;
                series.stack = stack;
                series.lines.show = lines;
                series.lines.steps = steps;
                series.bars.show = bars;

                chart.plotChart();
            }

            plotWithOptions();

            $(".stackControls button").click(function(e)
            {
                e.preventDefault();
                stack = $(this).text() == "With stacking" ? true : null;
                plotWithOptions();
            });

            $(".graphControls button").click(function(e)
            {
                e.preventDefault();
                bars = $(this).text().indexOf("Bars") != -1;
                lines = $(this).text().indexOf("Lines") != -1;
                steps = $(this).text().indexOf("steps") != -1;
                plotWithOptions();
            });
        });
    </script>
}

<div class="demo-container">
    <div id="@Model.PlaceholderId" class="demo-placeholder"></div>
</div>

<p>With the stack plugin, you can have Flot stack the series. This is useful if you wish to display both a total and the constituents it is made of. The only requirement is that you provide the input sorted on x.</p>

<p class="stackControls">
    <button>With stacking</button>
    <button>Without stacking</button>
</p>

<p class="graphControls">
    <button>Bars</button>
    <button>Lines</button>
    <button>Lines with steps</button>
</p>